{"ast":null,"code":"var _jsxFileName = \"/Users/amandagifford/SoftwareEngineering/ThriveTogetherFrontend2/src/Messages/InboxForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InboxForm(props) {\n  _s();\n\n  const [message, setMessage] = useState(\"\");\n  const [userData, setUserData] = useState(\"\");\n  const [updatedConversation, setUpdatedConversation] = useState([]);\n  const {\n    recipient\n  } = props;\n  useEffect(() => {\n    async function getUserData() {\n      let url = `${process.env.REACT_APP_API_HOST}/token`;\n      let response = await fetch(url, {\n        credentials: \"include\"\n      });\n      let data = await response.json();\n\n      if (response.ok) {\n        setUserData(data.account);\n      } else {\n        console.log(\"Your data could not be fetched\");\n      }\n    }\n\n    getUserData();\n  }, []);\n  const fetchInitialConversation = useCallback(async () => {\n    try {\n      const messagesUrl = `${process.env.REACT_APP_API_HOST}/api/messages/${userData[\"id\"]}/message/${recipient.recipient}`; // Assuming 2 is the recipient ID\n\n      const fetchConfig = {\n        credentials: 'include',\n        method: \"GET\",\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await fetch(messagesUrl, fetchConfig);\n      const data = await response.json();\n\n      if (response.ok) {\n        if (data.length > 10) {\n          const truncData = data.slice(0, 10);\n          setUpdatedConversation(truncData);\n        } else {\n          setUpdatedConversation(data);\n        }\n      } else {\n        console.log(\"Could not retrieve initial conversation.\");\n      }\n    } catch (error) {\n      console.error('Error fetching initial conversation data:', error);\n    }\n  }, [userData, recipient.recipient]);\n  useEffect(() => {\n    if (userData.id) {\n      fetchInitialConversation();\n    }\n  }, [userData.id, recipient, fetchInitialConversation]);\n\n  const handleNewMessage = event => {\n    const value = event.target.value;\n    setMessage(value);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const data = {};\n    data.content = message;\n    data.sender = userData.id;\n    data.recipient = props.recipient.recipient;\n    const createMessageUrl = `${process.env.REACT_APP_API_HOST}/api/messages/create`;\n    const fetchConfig = {\n      credentials: \"include\",\n      method: \"post\",\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const response = await fetch(createMessageUrl, fetchConfig); // let info = await response.json();\n\n      if (response.ok) {\n        const messagesUrl = `${process.env.REACT_APP_API_HOST}/api/messages/${data.sender}/message/${data.recipient}`;\n        const fetchConfig2 = {\n          credentials: \"include\",\n          method: \"get\",\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n        const response2 = await fetch(messagesUrl, fetchConfig2);\n        let info2 = await response2.json();\n\n        if (response2.ok) {\n          if (info2.length > 10) {\n            const truncData = info2.slice(0, 10);\n            setUpdatedConversation(truncData);\n          } else {\n            setUpdatedConversation(info2);\n          }\n        } else {\n          console.log(\"Could not retrieve updated conversation.\");\n        }\n\n        setMessage(\"\");\n      } else {\n        console.log(\"could not create message\");\n      }\n    } catch (error) {\n      console.error(\"Error handling the form submission:\", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-5 container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card shadow mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"card-title\",\n              children: \"Conversation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), Array.isArray(updatedConversation) && updatedConversation.length > 0 ? updatedConversation.slice().reverse().map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [message.sender === props.recipient.recipient ? /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: message.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Me\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 23\n              }, this), \": \", message.content]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this) // You can also render an empty state here\n            ]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card shadow\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"card-title\",\n              children: \"Inbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit,\n              id: \"create-model-form\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-floating mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  onChange: handleNewMessage,\n                  required: true,\n                  placeholder: \"NewMessage\",\n                  type: \"text\",\n                  id: \"new_message\",\n                  name: \"new_message\",\n                  value: message,\n                  className: \"form-control\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"new_message\",\n                  children: \"Message\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-lg btn-primary\",\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InboxForm, \"8iZhFCA0abuRp2F1smLM/DQlvZY=\");\n\n_c = InboxForm;\n\nconst mapStateToProps = state => ({\n  recipient: state.recipient\n});\n\nexport default connect(mapStateToProps)(InboxForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"InboxForm\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","connect","InboxForm","props","message","setMessage","userData","setUserData","updatedConversation","setUpdatedConversation","recipient","getUserData","url","process","env","REACT_APP_API_HOST","response","fetch","credentials","data","json","ok","account","console","log","fetchInitialConversation","messagesUrl","fetchConfig","method","headers","length","truncData","slice","error","id","handleNewMessage","event","value","target","handleSubmit","preventDefault","content","sender","createMessageUrl","body","JSON","stringify","fetchConfig2","response2","info2","Array","isArray","reverse","map","username","mapStateToProps","state"],"sources":["/Users/amandagifford/SoftwareEngineering/ThriveTogetherFrontend2/src/Messages/InboxForm.js"],"sourcesContent":["import React, {useEffect, useState, useCallback } from 'react';\nimport { connect } from 'react-redux';\n\nfunction InboxForm(props) {\n    const [message, setMessage] = useState(\"\");\n    const [userData, setUserData] = useState(\"\");\n    const [updatedConversation, setUpdatedConversation] = useState([]);\n    const { recipient } = props;\n\n    useEffect(() => {\n        async function getUserData() {\n            let url = `${process.env.REACT_APP_API_HOST}/token`;\n            let response = await fetch(url, {\n                credentials: \"include\",\n            });\n            let data = await response.json();\n\n            if (response.ok) {\n                setUserData(data.account);\n            } else {\n                console.log(\"Your data could not be fetched\");\n            }\n        }\n        getUserData();\n    }, []);\n\n    const fetchInitialConversation = useCallback( async () => {\n        try {\n\n            const messagesUrl = `${process.env.REACT_APP_API_HOST}/api/messages/${userData[\"id\"]}/message/${recipient.recipient}`; // Assuming 2 is the recipient ID\n            const fetchConfig = {\n            credentials: 'include',\n            method: \"GET\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            };\n\n            const response = await fetch(messagesUrl, fetchConfig);\n            const data = await response.json();\n\n            if (response.ok) {\n                if (data.length > 10) {\n                    const truncData = data.slice(0,10);\n                    setUpdatedConversation(truncData);\n\n                } else {\n                    setUpdatedConversation(data);\n                }\n\n            } else {\n            console.log(\"Could not retrieve initial conversation.\");\n            }\n        } catch (error) {\n            console.error('Error fetching initial conversation data:', error);\n        }\n    }, [userData, recipient.recipient])\n\n\n    useEffect(() => {\n        if (userData.id) {\n            fetchInitialConversation();\n        }\n\n\n    }, [userData.id, recipient, fetchInitialConversation]);\n\n    const handleNewMessage = (event) => {\n        const value = event.target.value;\n        setMessage(value);\n    }\n\n\n\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const data = {};\n\n        data.content = message;\n        data.sender = userData.id;\n        data.recipient = props.recipient.recipient;\n        const createMessageUrl = `${process.env.REACT_APP_API_HOST}/api/messages/create`;\n        const fetchConfig = {\n            credentials: \"include\",\n            method: \"post\",\n            body: JSON.stringify(data),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n\n        try {\n            const response = await fetch(createMessageUrl, fetchConfig);\n            // let info = await response.json();\n\n            if (response.ok) {\n                const messagesUrl = `${process.env.REACT_APP_API_HOST}/api/messages/${data.sender}/message/${data.recipient}`;\n                const fetchConfig2 = {\n                    credentials: \"include\",\n                    method: \"get\",\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                }\n                const response2 = await fetch(messagesUrl, fetchConfig2);\n                let info2 = await response2.json();\n\n                if (response2.ok) {\n                    if (info2.length > 10) {\n                        const truncData = info2.slice(0,10);\n                        setUpdatedConversation(truncData);\n                    } else {\n                        setUpdatedConversation(info2);\n                    }\n                } else {\n                    console.log(\"Could not retrieve updated conversation.\");\n                }\n                setMessage(\"\");\n            } else {\n            console.log(\"could not create message\");\n        }\n    } catch (error) {\n        console.error(\"Error handling the form submission:\", error);\n    }\n    };\n\n\n\nreturn (\n    <div className=\"my-5 container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"card shadow mb-4\">\n            <div className=\"card-body\">\n              <h1 className=\"card-title\">Conversation</h1>\n              {Array.isArray(updatedConversation) && updatedConversation.length > 0 ? (\n                updatedConversation.slice().reverse().map((message) => (\n                  <div key={message.id} className=\"mb-3\">\n                    {message.sender === props.recipient.recipient ? (\n                      <strong>{ message.username }</strong>\n                    ) : (\n                      <strong>Me</strong>\n                    )}: {message.content}\n                  </div>\n                ))\n              ) : (\n                <div>Loading...</div> // You can also render an empty state here\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"card shadow\">\n            <div className=\"card-body\">\n              <h1 className=\"card-title\">Inbox</h1>\n              <form onSubmit={handleSubmit} id=\"create-model-form\">\n                <div className=\"form-floating mb-3\">\n                  <input onChange={handleNewMessage} required placeholder=\"NewMessage\" type=\"text\" id=\"new_message\" name=\"new_message\" value={message} className=\"form-control\" />\n                  <label htmlFor=\"new_message\">Message</label>\n                </div>\n                <button className=\"btn btn-lg btn-primary\">Send</button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n}\n\nconst mapStateToProps = (state) => ({\n  recipient: state.recipient,\n});\n\nexport default connect(mapStateToProps)(InboxForm);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}