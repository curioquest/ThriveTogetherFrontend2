{"ast":null,"code":"var _jsxFileName = \"/Users/amandagifford/SoftwareEngineering/ThriveTogetherFrontend2/src/Messages/InboxMessage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { setRecipient } from './recipientActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InboxMessage(props) {\n  _s();\n\n  const [message, setMessage] = useState(\"\");\n  const [userData, setUserData] = useState(\"\");\n  const [updatedConversation, setUpdatedConversation] = useState([]);\n  const [peers, setPeers] = useState([]);\n  const [peer, setPeer] = useState(\"\");\n\n  const handlePeerChange = event => {\n    const value = event.target.value;\n    setPeer(value);\n  };\n\n  useEffect(() => {\n    async function getUserData() {\n      let url = `${process.env.REACT_APP_API_HOST}/token`;\n      let response = await fetch(url, {\n        credentials: \"include\"\n      });\n      let data = await response.json();\n\n      if (response.ok) {\n        setUserData(data.account);\n      } else {\n        console.log(\"Your data could not be fetched\");\n      }\n    }\n\n    getUserData();\n  }, []);\n  const getPeers = useCallback(async () => {\n    const user_id = userData[\"id\"];\n    const url = `${process.env.REACT_APP_API_HOST}/api/peers/${user_id}`;\n    const response = await fetch(url, {\n      credentials: \"include\"\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      setPeers(data);\n    }\n  }, [userData]);\n\n  const handleNewMessage = event => {\n    const value = event.target.value;\n    setMessage(value);\n  };\n\n  useEffect(() => {\n    if (userData.id) {\n      getPeers();\n    }\n  }, [userData.id, getPeers]);\n\n  const handleSetRecipient = peer => {\n    props.setRecipient({\n      recipient: peer\n    });\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const data = {};\n    data.content = message;\n    data.sender = userData.id;\n    data.recipient = peer;\n    handleSetRecipient(peer);\n    const createMessageUrl = `${process.env.REACT_APP_API_HOST}/api/messages/create`;\n    const fetchConfig = {\n      credentials: \"include\",\n      method: \"post\",\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const response = await fetch(createMessageUrl, fetchConfig);\n\n      if (response.ok) {\n        const messagesUrl = `${process.env.REACT_APP_API_HOST}/api/messages/${data.sender}/message/${data.recipient}`;\n        const fetchConfig2 = {\n          credentials: \"include\",\n          method: \"get\",\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n        const response2 = await fetch(messagesUrl, fetchConfig2);\n        let info2 = await response2.json();\n\n        if (response2.ok) {\n          if (info2.length > 10) {\n            const truncData = info2.slice(0, 10);\n            setUpdatedConversation(truncData);\n          } else {\n            setUpdatedConversation(info2);\n          }\n        } else {\n          console.log(\"Could not retrieve updated conversation.\");\n        }\n\n        setMessage(\"\");\n      } else {\n        console.log(\"could not create message\");\n      }\n    } catch (error) {\n      console.error(\"Error handling the form submission:\", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-5 container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card shadow mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"card-title\",\n              children: \"Conversation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), Array.isArray(updatedConversation) && updatedConversation.length > 0 ? updatedConversation.slice().reverse().map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [message.sender === props.recipient.recipient ? /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: message.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Me\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 23\n              }, this), \": \", message.content]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this) // You can also render an empty state here\n            ]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card shadow\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"card-title\",\n              children: \"Inbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit,\n              id: \"create-model-form\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-floating mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  onChange: handleNewMessage,\n                  required: true,\n                  placeholder: \"NewMessage\",\n                  type: \"text\",\n                  id: \"new_message\",\n                  name: \"new_message\",\n                  value: message,\n                  className: \"form-control\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"new_message\",\n                  children: \"Message\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-floating mb-3\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  onChange: handlePeerChange,\n                  value: peer.peer_id,\n                  required: true,\n                  name: \"peer\",\n                  id: \"peer\",\n                  className: \"form-select\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"Choose a Peer\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 33\n                  }, this), peers.map(peer => {\n                    return /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: peer.peer_id,\n                      children: peer.peer_name\n                    }, peer.peer_id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 155,\n                      columnNumber: 41\n                    }, this);\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-lg btn-primary\",\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InboxMessage, \"zRsCDxVp76hZvjtPhpJtUfjWTls=\");\n\n_c = InboxMessage;\nInboxMessage.defaultProps = {\n  recipient: {\n    recipient: 'defaultValue'\n  }\n};\n\nconst mapStateToProps = state => ({\n  recipient: state.recipient\n});\n\nexport default connect(mapStateToProps, {\n  setRecipient\n})(InboxMessage);\n\nvar _c;\n\n$RefreshReg$(_c, \"InboxMessage\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","connect","setRecipient","InboxMessage","props","message","setMessage","userData","setUserData","updatedConversation","setUpdatedConversation","peers","setPeers","peer","setPeer","handlePeerChange","event","value","target","getUserData","url","process","env","REACT_APP_API_HOST","response","fetch","credentials","data","json","ok","account","console","log","getPeers","user_id","handleNewMessage","id","handleSetRecipient","recipient","handleSubmit","preventDefault","content","sender","createMessageUrl","fetchConfig","method","body","JSON","stringify","headers","messagesUrl","fetchConfig2","response2","info2","length","truncData","slice","error","Array","isArray","reverse","map","username","peer_id","peer_name","defaultProps","mapStateToProps","state"],"sources":["/Users/amandagifford/SoftwareEngineering/ThriveTogetherFrontend2/src/Messages/InboxMessage.js"],"sourcesContent":["import React, {useEffect, useState, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { setRecipient } from './recipientActions';\n\n\nfunction InboxMessage(props){\n    const [message, setMessage] = useState(\"\");\n    const [userData, setUserData] = useState(\"\");\n    const [updatedConversation, setUpdatedConversation] = useState([]);\n    const [peers, setPeers] = useState([]);\n    const [peer, setPeer] = useState(\"\")\n\n     const handlePeerChange = (event) => {\n        const value = event.target.value;\n        setPeer(value);\n    }\n\n    useEffect(() => {\n        async function getUserData() {\n            let url = `${process.env.REACT_APP_API_HOST}/token`;\n            let response = await fetch(url, {\n                credentials: \"include\",\n            });\n            let data = await response.json();\n\n            if (response.ok) {\n                setUserData(data.account);\n            } else {\n                console.log(\"Your data could not be fetched\");\n            }\n        }\n        getUserData();\n    }, []);\n\n\n    const getPeers = useCallback(async () => {\n        const user_id = userData[\"id\"];\n        const url = `${process.env.REACT_APP_API_HOST}/api/peers/${user_id}`;\n        const response = await fetch(url, {\n          credentials: \"include\",\n        });\n        if (response.ok) {\n            const data = await response.json();\n            setPeers(data);\n        }\n    }, [userData]);\n\n    const handleNewMessage = (event) => {\n        const value = event.target.value;\n        setMessage(value);\n    }\n\n    useEffect(() => {\n        if (userData.id) {\n            getPeers();\n        }\n    }, [userData.id, getPeers]);\n\n    const handleSetRecipient = (peer) => {\n      props.setRecipient({recipient: peer});\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const data = {};\n\n        data.content = message;\n        data.sender = userData.id;\n        data.recipient = peer;\n        handleSetRecipient(peer);\n\n        const createMessageUrl = `${process.env.REACT_APP_API_HOST}/api/messages/create`;\n        const fetchConfig = {\n            credentials: \"include\",\n            method: \"post\",\n            body: JSON.stringify(data),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n\n        try {\n            const response = await fetch(createMessageUrl, fetchConfig);\n\n            if (response.ok) {\n                const messagesUrl = `${process.env.REACT_APP_API_HOST}/api/messages/${data.sender}/message/${data.recipient}`;\n                const fetchConfig2 = {\n                    credentials: \"include\",\n                    method: \"get\",\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                }\n                const response2 = await fetch(messagesUrl, fetchConfig2);\n                let info2 = await response2.json();\n\n                if (response2.ok) {\n                    if (info2.length > 10) {\n                        const truncData = info2.slice(0,10);\n                        setUpdatedConversation(truncData);\n                    } else {\n                        setUpdatedConversation(info2);\n                    }\n                } else {\n                    console.log(\"Could not retrieve updated conversation.\");\n                }\n                setMessage(\"\");\n            } else {\n            console.log(\"could not create message\");\n        }\n    } catch (error) {\n        console.error(\"Error handling the form submission:\", error);\n    }\n    };\n\nreturn (\n    <div className=\"my-5 container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"card shadow mb-4\">\n            <div className=\"card-body\">\n              <h1 className=\"card-title\">Conversation</h1>\n              {Array.isArray(updatedConversation) && updatedConversation.length > 0 ? (\n                updatedConversation.slice().reverse().map((message) => (\n                  <div key={message.id} className=\"mb-3\">\n                    {message.sender === props.recipient.recipient ? (\n                      <strong>{ message.username }</strong>\n                    ) : (\n                      <strong>Me</strong>\n                    )}: {message.content}\n                  </div>\n                ))\n              ) : (\n                <div>Loading...</div> // You can also render an empty state here\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"card shadow\">\n            <div className=\"card-body\">\n              <h1 className=\"card-title\">Inbox</h1>\n              <form onSubmit={handleSubmit} id=\"create-model-form\">\n                <div className=\"form-floating mb-3\">\n                  <input onChange={handleNewMessage} required placeholder=\"NewMessage\" type=\"text\" id=\"new_message\" name=\"new_message\" value={message} className=\"form-control\" />\n                  <label htmlFor=\"new_message\">Message</label>\n                </div>\n                <div className=\"form-floating mb-3\">\n                    <select onChange={handlePeerChange} value={peer.peer_id} required name=\"peer\" id=\"peer\" className=\"form-select\">\n                                <option value=\"\">Choose a Peer</option>\n                                {peers.map(peer => {\n                                    return (\n                                        <option key={peer.peer_id} value={peer.peer_id}>{peer.peer_name}</option>\n                                    );\n                                })}\n                    </select>\n                </div>\n                <button className=\"btn btn-lg btn-primary\">Send</button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nInboxMessage.defaultProps = {\n  recipient: { recipient: 'defaultValue' },\n};\n\nconst mapStateToProps = (state) => ({\n  recipient: state.recipient,\n});\n\nexport default connect(mapStateToProps, { setRecipient })(InboxMessage);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}